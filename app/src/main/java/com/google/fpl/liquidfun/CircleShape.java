/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class CircleShape extends Shape {
  private transient long swigCPtr;

  protected CircleShape(long cPtr, boolean cMemoryOwn) {
    super(liquidfunJNI.CircleShape_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CircleShape obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(CircleShape obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_CircleShape(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public CircleShape() {
    this(liquidfunJNI.new_CircleShape(), true);
  }

  public Shape clone(BlockAllocator allocator) {
    long cPtr = liquidfunJNI.CircleShape_clone(swigCPtr, this, BlockAllocator.getCPtr(allocator), allocator);
    return (cPtr == 0) ? null : new Shape(cPtr, false);
  }

  public int getChildCount() {
    return liquidfunJNI.CircleShape_getChildCount(swigCPtr, this);
  }

  public boolean testPoint(Transform transform, Vec2 p) {
    return liquidfunJNI.CircleShape_testPoint(swigCPtr, this, Transform.getCPtr(transform), transform, Vec2.getCPtr(p), p);
  }

  public void computeDistance(Transform xf, Vec2 p, SWIGTYPE_p_float distance, Vec2 normal, int childIndex) {
    liquidfunJNI.CircleShape_computeDistance(swigCPtr, this, Transform.getCPtr(xf), xf, Vec2.getCPtr(p), p, SWIGTYPE_p_float.getCPtr(distance), Vec2.getCPtr(normal), normal, childIndex);
  }

  public boolean rayCast(RayCastOutput output, RayCastInput input, Transform transform, int childIndex) {
    return liquidfunJNI.CircleShape_rayCast(swigCPtr, this, RayCastOutput.getCPtr(output), output, RayCastInput.getCPtr(input), input, Transform.getCPtr(transform), transform, childIndex);
  }

  public void computeAABB(AABB aabb, Transform transform, int childIndex) {
    liquidfunJNI.CircleShape_computeAABB(swigCPtr, this, AABB.getCPtr(aabb), aabb, Transform.getCPtr(transform), transform, childIndex);
  }

  public void computeMass(MassData massData, float density) {
    liquidfunJNI.CircleShape_computeMass(swigCPtr, this, MassData.getCPtr(massData), massData, density);
  }

  public int getSupport(Vec2 d) {
    return liquidfunJNI.CircleShape_getSupport(swigCPtr, this, Vec2.getCPtr(d), d);
  }

  public Vec2 getSupportVertex(Vec2 d) {
    return new Vec2(liquidfunJNI.CircleShape_getSupportVertex(swigCPtr, this, Vec2.getCPtr(d), d), false);
  }

  public int getVertexCount() {
    return liquidfunJNI.CircleShape_getVertexCount(swigCPtr, this);
  }

  public Vec2 getVertex(int index) {
    return new Vec2(liquidfunJNI.CircleShape_getVertex(swigCPtr, this, index), false);
  }

  public void setPosition(float x, float y) {
    liquidfunJNI.CircleShape_setPosition(swigCPtr, this, x, y);
  }

  public float getPositionX() {
    return liquidfunJNI.CircleShape_getPositionX(swigCPtr, this);
  }

  public float getPositionY() {
    return liquidfunJNI.CircleShape_getPositionY(swigCPtr, this);
  }

  public void setP(Vec2 value) {
    liquidfunJNI.CircleShape_p_set(swigCPtr, this, Vec2.getCPtr(value), value);
  }

  public Vec2 getP() {
    return new Vec2(liquidfunJNI.CircleShape_p_get(swigCPtr, this), false);
  }

}
