/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class Contact {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Contact(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Contact obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Contact obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  public SWIGTYPE_p_b2Manifold getManifold() {
    long cPtr = liquidfunJNI.Contact_getManifold__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_b2Manifold(cPtr, false);
  }

  public void getWorldManifold(SWIGTYPE_p_b2WorldManifold worldManifold) {
    liquidfunJNI.Contact_getWorldManifold(swigCPtr, this, SWIGTYPE_p_b2WorldManifold.getCPtr(worldManifold));
  }

  public boolean isTouching() {
    return liquidfunJNI.Contact_isTouching(swigCPtr, this);
  }

  public void setEnabled(boolean flag) {
    liquidfunJNI.Contact_setEnabled(swigCPtr, this, flag);
  }

  public boolean isEnabled() {
    return liquidfunJNI.Contact_isEnabled(swigCPtr, this);
  }

  public Contact getNext() {
    long cPtr = liquidfunJNI.Contact_getNext__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Contact(cPtr, false);
  }

  public Fixture getFixtureA() {
    long cPtr = liquidfunJNI.Contact_getFixtureA__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Fixture(cPtr, false);
  }

  public int getChildIndexA() {
    return liquidfunJNI.Contact_getChildIndexA(swigCPtr, this);
  }

  public Fixture getFixtureB() {
    long cPtr = liquidfunJNI.Contact_getFixtureB__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Fixture(cPtr, false);
  }

  public int getChildIndexB() {
    return liquidfunJNI.Contact_getChildIndexB(swigCPtr, this);
  }

  public void setFriction(float friction) {
    liquidfunJNI.Contact_setFriction(swigCPtr, this, friction);
  }

  public float getFriction() {
    return liquidfunJNI.Contact_getFriction(swigCPtr, this);
  }

  public void resetFriction() {
    liquidfunJNI.Contact_resetFriction(swigCPtr, this);
  }

  public void setRestitution(float restitution) {
    liquidfunJNI.Contact_setRestitution(swigCPtr, this, restitution);
  }

  public float getRestitution() {
    return liquidfunJNI.Contact_getRestitution(swigCPtr, this);
  }

  public void resetRestitution() {
    liquidfunJNI.Contact_resetRestitution(swigCPtr, this);
  }

  public void setTangentSpeed(float speed) {
    liquidfunJNI.Contact_setTangentSpeed(swigCPtr, this, speed);
  }

  public float getTangentSpeed() {
    return liquidfunJNI.Contact_getTangentSpeed(swigCPtr, this);
  }

  public void evaluate(SWIGTYPE_p_b2Manifold manifold, Transform xfA, Transform xfB) {
    liquidfunJNI.Contact_evaluate(swigCPtr, this, SWIGTYPE_p_b2Manifold.getCPtr(manifold), Transform.getCPtr(xfA), xfA, Transform.getCPtr(xfB), xfB);
  }

}
