/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class DistanceProxy {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected DistanceProxy(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DistanceProxy obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(DistanceProxy obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_DistanceProxy(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public DistanceProxy() {
    this(liquidfunJNI.new_DistanceProxy(), true);
  }

  public void set(Shape shape, int index) {
    liquidfunJNI.DistanceProxy_set(swigCPtr, this, Shape.getCPtr(shape), shape, index);
  }

  public int getSupport(Vec2 d) {
    return liquidfunJNI.DistanceProxy_getSupport(swigCPtr, this, Vec2.getCPtr(d), d);
  }

  public Vec2 getSupportVertex(Vec2 d) {
    return new Vec2(liquidfunJNI.DistanceProxy_getSupportVertex(swigCPtr, this, Vec2.getCPtr(d), d), false);
  }

  public int getVertexCount() {
    return liquidfunJNI.DistanceProxy_getVertexCount(swigCPtr, this);
  }

  public Vec2 getVertex(int index) {
    return new Vec2(liquidfunJNI.DistanceProxy_getVertex(swigCPtr, this, index), false);
  }

  public void setBuffer(Vec2 value) {
    liquidfunJNI.DistanceProxy_buffer_set(swigCPtr, this, Vec2.getCPtr(value), value);
  }

  public Vec2 getBuffer() {
    long cPtr = liquidfunJNI.DistanceProxy_buffer_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vec2(cPtr, false);
  }

  public void setVertices(Vec2 value) {
    liquidfunJNI.DistanceProxy_vertices_set(swigCPtr, this, Vec2.getCPtr(value), value);
  }

  public Vec2 getVertices() {
    long cPtr = liquidfunJNI.DistanceProxy_vertices_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vec2(cPtr, false);
  }

  public void setCount(int value) {
    liquidfunJNI.DistanceProxy_count_set(swigCPtr, this, value);
  }

  public int getCount() {
    return liquidfunJNI.DistanceProxy_count_get(swigCPtr, this);
  }

  public void setRadius(float value) {
    liquidfunJNI.DistanceProxy_radius_set(swigCPtr, this, value);
  }

  public float getRadius() {
    return liquidfunJNI.DistanceProxy_radius_get(swigCPtr, this);
  }

}
