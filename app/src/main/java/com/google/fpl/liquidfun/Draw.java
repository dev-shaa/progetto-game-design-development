/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class Draw {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Draw(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Draw obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(Draw obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_Draw(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setFlags(long flags) {
    liquidfunJNI.Draw_setFlags(swigCPtr, this, flags);
  }

  public long getFlags() {
    return liquidfunJNI.Draw_getFlags(swigCPtr, this);
  }

  public void appendFlags(long flags) {
    liquidfunJNI.Draw_appendFlags(swigCPtr, this, flags);
  }

  public void clearFlags(long flags) {
    liquidfunJNI.Draw_clearFlags(swigCPtr, this, flags);
  }

  public void drawPolygon(Vec2 vertices, int vertexCount, Color color) {
    liquidfunJNI.Draw_drawPolygon(swigCPtr, this, Vec2.getCPtr(vertices), vertices, vertexCount, Color.getCPtr(color), color);
  }

  public void drawSolidPolygon(Vec2 vertices, int vertexCount, Color color) {
    liquidfunJNI.Draw_drawSolidPolygon(swigCPtr, this, Vec2.getCPtr(vertices), vertices, vertexCount, Color.getCPtr(color), color);
  }

  public void drawCircle(Vec2 center, float radius, Color color) {
    liquidfunJNI.Draw_drawCircle(swigCPtr, this, Vec2.getCPtr(center), center, radius, Color.getCPtr(color), color);
  }

  public void drawSolidCircle(Vec2 center, float radius, Vec2 axis, Color color) {
    liquidfunJNI.Draw_drawSolidCircle(swigCPtr, this, Vec2.getCPtr(center), center, radius, Vec2.getCPtr(axis), axis, Color.getCPtr(color), color);
  }

  public void drawParticles(Vec2 centers, float radius, ParticleColor colors, int count) {
    liquidfunJNI.Draw_drawParticles(swigCPtr, this, Vec2.getCPtr(centers), centers, radius, ParticleColor.getCPtr(colors), colors, count);
  }

  public void drawSegment(Vec2 p1, Vec2 p2, Color color) {
    liquidfunJNI.Draw_drawSegment(swigCPtr, this, Vec2.getCPtr(p1), p1, Vec2.getCPtr(p2), p2, Color.getCPtr(color), color);
  }

  public void drawTransform(Transform xf) {
    liquidfunJNI.Draw_drawTransform(swigCPtr, this, Transform.getCPtr(xf), xf);
  }

  public final static int e_shapeBit = liquidfunJNI.Draw_e_shapeBit_get();
  public final static int e_jointBit = liquidfunJNI.Draw_e_jointBit_get();
  public final static int e_aabbBit = liquidfunJNI.Draw_e_aabbBit_get();
  public final static int e_pairBit = liquidfunJNI.Draw_e_pairBit_get();
  public final static int e_centerOfMassBit = liquidfunJNI.Draw_e_centerOfMassBit_get();
  public final static int e_particleBit = liquidfunJNI.Draw_e_particleBit_get();

}
