/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class IntrusiveListNode {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected IntrusiveListNode(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(IntrusiveListNode obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(IntrusiveListNode obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_IntrusiveListNode(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public IntrusiveListNode() {
    this(liquidfunJNI.new_IntrusiveListNode(), true);
  }

  public void insertAfter(IntrusiveListNode node) {
    liquidfunJNI.IntrusiveListNode_insertAfter(swigCPtr, this, IntrusiveListNode.getCPtr(node), node);
  }

  public void insertBefore(IntrusiveListNode node) {
    liquidfunJNI.IntrusiveListNode_insertBefore(swigCPtr, this, IntrusiveListNode.getCPtr(node), node);
  }

  public IntrusiveListNode getTerminator() {
    long cPtr = liquidfunJNI.IntrusiveListNode_getTerminator(swigCPtr, this);
    return (cPtr == 0) ? null : new IntrusiveListNode(cPtr, false);
  }

  public IntrusiveListNode remove() {
    long cPtr = liquidfunJNI.IntrusiveListNode_remove(swigCPtr, this);
    return (cPtr == 0) ? null : new IntrusiveListNode(cPtr, false);
  }

  public boolean isEmpty() {
    return liquidfunJNI.IntrusiveListNode_isEmpty(swigCPtr, this);
  }

  public boolean inList() {
    return liquidfunJNI.IntrusiveListNode_inList(swigCPtr, this);
  }

  public long getLength() {
    return liquidfunJNI.IntrusiveListNode_getLength(swigCPtr, this);
  }

  public IntrusiveListNode getNext() {
    long cPtr = liquidfunJNI.IntrusiveListNode_getNext(swigCPtr, this);
    return (cPtr == 0) ? null : new IntrusiveListNode(cPtr, false);
  }

  public IntrusiveListNode getPrevious() {
    long cPtr = liquidfunJNI.IntrusiveListNode_getPrevious(swigCPtr, this);
    return (cPtr == 0) ? null : new IntrusiveListNode(cPtr, false);
  }

  public boolean validateList() {
    return liquidfunJNI.IntrusiveListNode_validateList(swigCPtr, this);
  }

  public boolean findNodeInList(IntrusiveListNode nodeToFind) {
    return liquidfunJNI.IntrusiveListNode_findNodeInList(swigCPtr, this, IntrusiveListNode.getCPtr(nodeToFind), nodeToFind);
  }

}
