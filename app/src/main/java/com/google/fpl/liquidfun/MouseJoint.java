/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class MouseJoint extends Joint {
  private transient long swigCPtr;

  protected MouseJoint(long cPtr, boolean cMemoryOwn) {
    super(liquidfunJNI.MouseJoint_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MouseJoint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(MouseJoint obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_MouseJoint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Vec2 getAnchorA() {
    return new Vec2(liquidfunJNI.MouseJoint_getAnchorA(swigCPtr, this), true);
  }

  public Vec2 getAnchorB() {
    return new Vec2(liquidfunJNI.MouseJoint_getAnchorB(swigCPtr, this), true);
  }

  public Vec2 getReactionForce(float inv_dt) {
    return new Vec2(liquidfunJNI.MouseJoint_getReactionForce(swigCPtr, this, inv_dt), true);
  }

  public float getReactionTorque(float inv_dt) {
    return liquidfunJNI.MouseJoint_getReactionTorque(swigCPtr, this, inv_dt);
  }

  public void setTarget(Vec2 target) {
    liquidfunJNI.MouseJoint_setTarget__SWIG_0(swigCPtr, this, Vec2.getCPtr(target), target);
  }

  public Vec2 getTarget() {
    return new Vec2(liquidfunJNI.MouseJoint_getTarget(swigCPtr, this), false);
  }

  public void setTarget(float x, float y) {
    liquidfunJNI.MouseJoint_setTarget__SWIG_1(swigCPtr, this, x, y);
  }

  public void setMaxForce(float force) {
    liquidfunJNI.MouseJoint_setMaxForce(swigCPtr, this, force);
  }

  public float getMaxForce() {
    return liquidfunJNI.MouseJoint_getMaxForce(swigCPtr, this);
  }

  public void setFrequency(float hz) {
    liquidfunJNI.MouseJoint_setFrequency(swigCPtr, this, hz);
  }

  public float getFrequency() {
    return liquidfunJNI.MouseJoint_getFrequency(swigCPtr, this);
  }

  public void setDampingRatio(float ratio) {
    liquidfunJNI.MouseJoint_setDampingRatio(swigCPtr, this, ratio);
  }

  public float getDampingRatio() {
    return liquidfunJNI.MouseJoint_getDampingRatio(swigCPtr, this);
  }

  public void dump() {
    liquidfunJNI.MouseJoint_dump(swigCPtr, this);
  }

  public void shiftOrigin(Vec2 newOrigin) {
    liquidfunJNI.MouseJoint_shiftOrigin__SWIG_0(swigCPtr, this, Vec2.getCPtr(newOrigin), newOrigin);
  }

  public void shiftOrigin(float x, float y) {
    liquidfunJNI.MouseJoint_shiftOrigin__SWIG_1(swigCPtr, this, x, y);
  }

}
