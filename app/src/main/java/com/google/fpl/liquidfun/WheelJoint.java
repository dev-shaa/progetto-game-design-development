/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class WheelJoint extends Joint {
  private transient long swigCPtr;

  protected WheelJoint(long cPtr, boolean cMemoryOwn) {
    super(liquidfunJNI.WheelJoint_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(WheelJoint obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(WheelJoint obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_WheelJoint(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Vec2 getAnchorA() {
    return new Vec2(liquidfunJNI.WheelJoint_getAnchorA(swigCPtr, this), true);
  }

  public Vec2 getAnchorB() {
    return new Vec2(liquidfunJNI.WheelJoint_getAnchorB(swigCPtr, this), true);
  }

  public Vec2 getReactionForce(float inv_dt) {
    return new Vec2(liquidfunJNI.WheelJoint_getReactionForce(swigCPtr, this, inv_dt), true);
  }

  public float getReactionTorque(float inv_dt) {
    return liquidfunJNI.WheelJoint_getReactionTorque(swigCPtr, this, inv_dt);
  }

  public Vec2 getLocalAnchorA() {
    return new Vec2(liquidfunJNI.WheelJoint_getLocalAnchorA(swigCPtr, this), false);
  }

  public Vec2 getLocalAnchorB() {
    return new Vec2(liquidfunJNI.WheelJoint_getLocalAnchorB(swigCPtr, this), false);
  }

  public Vec2 getLocalAxisA() {
    return new Vec2(liquidfunJNI.WheelJoint_getLocalAxisA(swigCPtr, this), false);
  }

  public float getJointTranslation() {
    return liquidfunJNI.WheelJoint_getJointTranslation(swigCPtr, this);
  }

  public float getJointSpeed() {
    return liquidfunJNI.WheelJoint_getJointSpeed(swigCPtr, this);
  }

  public boolean isMotorEnabled() {
    return liquidfunJNI.WheelJoint_isMotorEnabled(swigCPtr, this);
  }

  public void enableMotor(boolean flag) {
    liquidfunJNI.WheelJoint_enableMotor(swigCPtr, this, flag);
  }

  public void setMotorSpeed(float speed) {
    liquidfunJNI.WheelJoint_setMotorSpeed(swigCPtr, this, speed);
  }

  public float getMotorSpeed() {
    return liquidfunJNI.WheelJoint_getMotorSpeed(swigCPtr, this);
  }

  public void setMaxMotorTorque(float torque) {
    liquidfunJNI.WheelJoint_setMaxMotorTorque(swigCPtr, this, torque);
  }

  public float getMaxMotorTorque() {
    return liquidfunJNI.WheelJoint_getMaxMotorTorque(swigCPtr, this);
  }

  public float getMotorTorque(float inv_dt) {
    return liquidfunJNI.WheelJoint_getMotorTorque(swigCPtr, this, inv_dt);
  }

  public void setSpringFrequencyHz(float hz) {
    liquidfunJNI.WheelJoint_setSpringFrequencyHz(swigCPtr, this, hz);
  }

  public float getSpringFrequencyHz() {
    return liquidfunJNI.WheelJoint_getSpringFrequencyHz(swigCPtr, this);
  }

  public void setSpringDampingRatio(float ratio) {
    liquidfunJNI.WheelJoint_setSpringDampingRatio(swigCPtr, this, ratio);
  }

  public float getSpringDampingRatio() {
    return liquidfunJNI.WheelJoint_getSpringDampingRatio(swigCPtr, this);
  }

  public void dump() {
    liquidfunJNI.WheelJoint_dump(swigCPtr, this);
  }

}
