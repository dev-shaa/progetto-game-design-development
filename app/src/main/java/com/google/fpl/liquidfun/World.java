/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class World {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected World(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(World obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected static long swigRelease(World obj) {
    long ptr = 0;
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new RuntimeException("Cannot release ownership as memory is not owned");
      ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.delete();
    }
    return ptr;
  }

  @SuppressWarnings({"deprecation", "removal"})
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        liquidfunJNI.delete_World(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public World(Vec2 gravity) {
    this(liquidfunJNI.new_World__SWIG_0(Vec2.getCPtr(gravity), gravity), true);
  }

  public void setDestructionListener(SWIGTYPE_p_b2DestructionListener listener) {
    liquidfunJNI.World_setDestructionListener(swigCPtr, this, SWIGTYPE_p_b2DestructionListener.getCPtr(listener));
  }

  public void setContactFilter(SWIGTYPE_p_b2ContactFilter filter) {
    liquidfunJNI.World_setContactFilter(swigCPtr, this, SWIGTYPE_p_b2ContactFilter.getCPtr(filter));
  }

  public void setContactListener(ContactListener listener) {
    liquidfunJNI.World_setContactListener(swigCPtr, this, ContactListener.getCPtr(listener), listener);
  }

  public void setDebugDraw(SWIGTYPE_p_b2Draw debugDraw) {
    liquidfunJNI.World_setDebugDraw(swigCPtr, this, SWIGTYPE_p_b2Draw.getCPtr(debugDraw));
  }

  public Body createBody(BodyDef def) {
    long cPtr = liquidfunJNI.World_createBody(swigCPtr, this, BodyDef.getCPtr(def), def);
    return (cPtr == 0) ? null : new Body(cPtr, false);
  }

  public void destroyBody(Body body) {
    liquidfunJNI.World_destroyBody(swigCPtr, this, Body.getCPtr(body), body);
  }

  public Joint createJoint(JointDef def) {
    long cPtr = liquidfunJNI.World_createJoint(swigCPtr, this, JointDef.getCPtr(def), def);
    return (cPtr == 0) ? null : new Joint(cPtr, false);
  }

  public void destroyJoint(Joint joint) {
    liquidfunJNI.World_destroyJoint(swigCPtr, this, Joint.getCPtr(joint), joint);
  }

  public ParticleSystem createParticleSystem(ParticleSystemDef def) {
    long cPtr = liquidfunJNI.World_createParticleSystem(swigCPtr, this, ParticleSystemDef.getCPtr(def), def);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public void destroyParticleSystem(ParticleSystem p) {
    liquidfunJNI.World_destroyParticleSystem(swigCPtr, this, ParticleSystem.getCPtr(p), p);
  }

  public void step(float timeStep, int velocityIterations, int positionIterations, int particleIterations) {
    liquidfunJNI.World_step__SWIG_0(swigCPtr, this, timeStep, velocityIterations, positionIterations, particleIterations);
  }

  public void step(float timeStep, int velocityIterations, int positionIterations) {
    liquidfunJNI.World_step__SWIG_1(swigCPtr, this, timeStep, velocityIterations, positionIterations);
  }

  public int calculateReasonableParticleIterations(float timeStep) {
    return liquidfunJNI.World_calculateReasonableParticleIterations(swigCPtr, this, timeStep);
  }

  public void clearForces() {
    liquidfunJNI.World_clearForces(swigCPtr, this);
  }

  public void drawDebugData() {
    liquidfunJNI.World_drawDebugData(swigCPtr, this);
  }

  public void queryAABB(QueryCallback callback, SWIGTYPE_p_b2AABB aabb) {
    liquidfunJNI.World_queryAABB(swigCPtr, this, QueryCallback.getCPtr(callback), callback, SWIGTYPE_p_b2AABB.getCPtr(aabb));
  }

  public void queryShapeAABB(QueryCallback callback, Shape shape, Transform xf) {
    liquidfunJNI.World_queryShapeAABB(swigCPtr, this, QueryCallback.getCPtr(callback), callback, Shape.getCPtr(shape), shape, Transform.getCPtr(xf), xf);
  }

  public void rayCast(RayCastCallback callback, Vec2 point1, Vec2 point2) {
    liquidfunJNI.World_rayCast(swigCPtr, this, RayCastCallback.getCPtr(callback), callback, Vec2.getCPtr(point1), point1, Vec2.getCPtr(point2), point2);
  }

  public Body getBodyList() {
    long cPtr = liquidfunJNI.World_getBodyList__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Body(cPtr, false);
  }

  public Joint getJointList() {
    long cPtr = liquidfunJNI.World_getJointList__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Joint(cPtr, false);
  }

  public ParticleSystem getParticleSystemList() {
    long cPtr = liquidfunJNI.World_getParticleSystemList__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public Contact getContactList() {
    long cPtr = liquidfunJNI.World_getContactList__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new Contact(cPtr, false);
  }

  public void setAllowSleeping(boolean flag) {
    liquidfunJNI.World_setAllowSleeping(swigCPtr, this, flag);
  }

  public boolean getAllowSleeping() {
    return liquidfunJNI.World_getAllowSleeping(swigCPtr, this);
  }

  public void setWarmStarting(boolean flag) {
    liquidfunJNI.World_setWarmStarting(swigCPtr, this, flag);
  }

  public boolean getWarmStarting() {
    return liquidfunJNI.World_getWarmStarting(swigCPtr, this);
  }

  public void setContinuousPhysics(boolean flag) {
    liquidfunJNI.World_setContinuousPhysics(swigCPtr, this, flag);
  }

  public boolean getContinuousPhysics() {
    return liquidfunJNI.World_getContinuousPhysics(swigCPtr, this);
  }

  public void setSubStepping(boolean flag) {
    liquidfunJNI.World_setSubStepping(swigCPtr, this, flag);
  }

  public boolean getSubStepping() {
    return liquidfunJNI.World_getSubStepping(swigCPtr, this);
  }

  public int getProxyCount() {
    return liquidfunJNI.World_getProxyCount(swigCPtr, this);
  }

  public int getBodyCount() {
    return liquidfunJNI.World_getBodyCount(swigCPtr, this);
  }

  public int getJointCount() {
    return liquidfunJNI.World_getJointCount(swigCPtr, this);
  }

  public int getContactCount() {
    return liquidfunJNI.World_getContactCount(swigCPtr, this);
  }

  public int getTreeHeight() {
    return liquidfunJNI.World_getTreeHeight(swigCPtr, this);
  }

  public int getTreeBalance() {
    return liquidfunJNI.World_getTreeBalance(swigCPtr, this);
  }

  public float getTreeQuality() {
    return liquidfunJNI.World_getTreeQuality(swigCPtr, this);
  }

  public void setGravity(Vec2 gravity) {
    liquidfunJNI.World_setGravity__SWIG_0(swigCPtr, this, Vec2.getCPtr(gravity), gravity);
  }

  public Vec2 getGravity() {
    return new Vec2(liquidfunJNI.World_getGravity(swigCPtr, this), true);
  }

  public boolean isLocked() {
    return liquidfunJNI.World_isLocked(swigCPtr, this);
  }

  public void setAutoClearForces(boolean flag) {
    liquidfunJNI.World_setAutoClearForces(swigCPtr, this, flag);
  }

  public boolean getAutoClearForces() {
    return liquidfunJNI.World_getAutoClearForces(swigCPtr, this);
  }

  public void shiftOrigin(Vec2 newOrigin) {
    liquidfunJNI.World_shiftOrigin(swigCPtr, this, Vec2.getCPtr(newOrigin), newOrigin);
  }

  public ContactManager getContactManager() {
    return new ContactManager(liquidfunJNI.World_getContactManager(swigCPtr, this), false);
  }

  public SWIGTYPE_p_b2Profile getProfile() {
    return new SWIGTYPE_p_b2Profile(liquidfunJNI.World_getProfile(swigCPtr, this), false);
  }

  public void dump() {
    liquidfunJNI.World_dump(swigCPtr, this);
  }

  public Version getVersion() {
    long cPtr = liquidfunJNI.World_getVersion(swigCPtr, this);
    return (cPtr == 0) ? null : new Version(cPtr, false);
  }

  public String getVersionString() {
    return liquidfunJNI.World_getVersionString(swigCPtr, this);
  }

  public World(float gravityX, float gravityY) {
    this(liquidfunJNI.new_World__SWIG_1(gravityX, gravityY), true);
  }

  public void setGravity(float gravityX, float gravityY) {
    liquidfunJNI.World_setGravity__SWIG_1(swigCPtr, this, gravityX, gravityY);
  }

}
