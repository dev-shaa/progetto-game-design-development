/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class liquidfun implements liquidfunConstants {
  public static java.lang.Object b2Alloc(int size) {
    return liquidfunJNI.b2Alloc(size);
  }

  public static void b2Free(java.lang.Object mem) {
    liquidfunJNI.b2Free(mem);
  }

  public static void b2SetAllocFreeCallbacks(SWIGTYPE_p_f_int_p_void__p_void allocCallback, SWIGTYPE_p_f_p_void_p_void__void freeCallback, java.lang.Object callbackData) {
    liquidfunJNI.b2SetAllocFreeCallbacks(SWIGTYPE_p_f_int_p_void__p_void.getCPtr(allocCallback), SWIGTYPE_p_f_p_void_p_void__void.getCPtr(freeCallback), callbackData);
  }

  public static void b2SetNumAllocs(int numAllocs) {
    liquidfunJNI.b2SetNumAllocs(numAllocs);
  }

  public static int b2GetNumAllocs() {
    return liquidfunJNI.b2GetNumAllocs();
  }

  public static void b2Log(String string) {
    liquidfunJNI.b2Log(string);
  }

  public static void setB2_version(Version value) {
    liquidfunJNI.b2_version_set(Version.getCPtr(value), value);
  }

  public static Version getB2_version() {
    return new Version(liquidfunJNI.b2_version_get(), false);
  }

  public static Version getB2_liquidFunVersion() {
    return new Version(liquidfunJNI.b2_liquidFunVersion_get(), false);
  }

  public static void setB2_liquidFunVersionString(String value) {
    liquidfunJNI.b2_liquidFunVersionString_set(value);
  }

  public static String getB2_liquidFunVersionString() {
    return liquidfunJNI.b2_liquidFunVersionString_get();
  }

  public static boolean b2IsValid(float x) {
    return liquidfunJNI.b2IsValid(x);
  }

  public static float b2InvSqrt(float x) {
    return liquidfunJNI.b2InvSqrt(x);
  }

  public static Vec2 getB2Vec2_zero() {
    return new Vec2(liquidfunJNI.b2Vec2_zero_get(), false);
  }

  public static float b2Dot(Vec2 a, Vec2 b) {
    return liquidfunJNI.b2Dot__SWIG_0(Vec2.getCPtr(a), a, Vec2.getCPtr(b), b);
  }

  public static float b2Cross(Vec2 a, Vec2 b) {
    return liquidfunJNI.b2Cross__SWIG_0(Vec2.getCPtr(a), a, Vec2.getCPtr(b), b);
  }

  public static Vec2 b2Cross(Vec2 a, float s) {
    return new Vec2(liquidfunJNI.b2Cross__SWIG_1(Vec2.getCPtr(a), a, s), true);
  }

  public static Vec2 b2Cross(float s, Vec2 a) {
    return new Vec2(liquidfunJNI.b2Cross__SWIG_2(s, Vec2.getCPtr(a), a), true);
  }

  public static Vec2 b2Mul(Mat22 A, Vec2 v) {
    return new Vec2(liquidfunJNI.b2Mul__SWIG_0(Mat22.getCPtr(A), A, Vec2.getCPtr(v), v), true);
  }

  public static Vec2 b2MulT(Mat22 A, Vec2 v) {
    return new Vec2(liquidfunJNI.b2MulT__SWIG_0(Mat22.getCPtr(A), A, Vec2.getCPtr(v), v), true);
  }

  public static boolean equals(Vec2 a, Vec2 b) {
    return liquidfunJNI.equals(Vec2.getCPtr(a), a, Vec2.getCPtr(b), b);
  }

  public static float b2Distance(Vec2 a, Vec2 b) {
    return liquidfunJNI.b2Distance__SWIG_0(Vec2.getCPtr(a), a, Vec2.getCPtr(b), b);
  }

  public static float b2DistanceSquared(Vec2 a, Vec2 b) {
    return liquidfunJNI.b2DistanceSquared(Vec2.getCPtr(a), a, Vec2.getCPtr(b), b);
  }

  public static float b2Dot(Vec3 a, Vec3 b) {
    return liquidfunJNI.b2Dot__SWIG_1(Vec3.getCPtr(a), a, Vec3.getCPtr(b), b);
  }

  public static Vec3 b2Cross(Vec3 a, Vec3 b) {
    return new Vec3(liquidfunJNI.b2Cross__SWIG_3(Vec3.getCPtr(a), a, Vec3.getCPtr(b), b), true);
  }

  public static Mat22 b2Mul(Mat22 A, Mat22 B) {
    return new Mat22(liquidfunJNI.b2Mul__SWIG_1(Mat22.getCPtr(A), A, Mat22.getCPtr(B), B), true);
  }

  public static Mat22 b2MulT(Mat22 A, Mat22 B) {
    return new Mat22(liquidfunJNI.b2MulT__SWIG_1(Mat22.getCPtr(A), A, Mat22.getCPtr(B), B), true);
  }

  public static Vec3 b2Mul(Mat33 A, Vec3 v) {
    return new Vec3(liquidfunJNI.b2Mul__SWIG_2(Mat33.getCPtr(A), A, Vec3.getCPtr(v), v), true);
  }

  public static Vec2 b2Mul22(Mat33 A, Vec2 v) {
    return new Vec2(liquidfunJNI.b2Mul22(Mat33.getCPtr(A), A, Vec2.getCPtr(v), v), true);
  }

  public static Rot b2Mul(Rot q, Rot r) {
    return new Rot(liquidfunJNI.b2Mul__SWIG_3(Rot.getCPtr(q), q, Rot.getCPtr(r), r), true);
  }

  public static Rot b2MulT(Rot q, Rot r) {
    return new Rot(liquidfunJNI.b2MulT__SWIG_2(Rot.getCPtr(q), q, Rot.getCPtr(r), r), true);
  }

  public static Vec2 b2Mul(Rot q, Vec2 v) {
    return new Vec2(liquidfunJNI.b2Mul__SWIG_4(Rot.getCPtr(q), q, Vec2.getCPtr(v), v), true);
  }

  public static Vec2 b2MulT(Rot q, Vec2 v) {
    return new Vec2(liquidfunJNI.b2MulT__SWIG_3(Rot.getCPtr(q), q, Vec2.getCPtr(v), v), true);
  }

  public static Vec2 b2Mul(Transform T, Vec2 v) {
    return new Vec2(liquidfunJNI.b2Mul__SWIG_5(Transform.getCPtr(T), T, Vec2.getCPtr(v), v), true);
  }

  public static Vec2 b2MulT(Transform T, Vec2 v) {
    return new Vec2(liquidfunJNI.b2MulT__SWIG_4(Transform.getCPtr(T), T, Vec2.getCPtr(v), v), true);
  }

  public static Transform b2Mul(Transform A, Transform B) {
    return new Transform(liquidfunJNI.b2Mul__SWIG_6(Transform.getCPtr(A), A, Transform.getCPtr(B), B), true);
  }

  public static Transform b2MulT(Transform A, Transform B) {
    return new Transform(liquidfunJNI.b2MulT__SWIG_5(Transform.getCPtr(A), A, Transform.getCPtr(B), B), true);
  }

  public static Vec2 b2Abs(Vec2 a) {
    return new Vec2(liquidfunJNI.b2Abs__SWIG_0(Vec2.getCPtr(a), a), true);
  }

  public static Mat22 b2Abs(Mat22 A) {
    return new Mat22(liquidfunJNI.b2Abs__SWIG_1(Mat22.getCPtr(A), A), true);
  }

  public static Vec2 b2Min(Vec2 a, Vec2 b) {
    return new Vec2(liquidfunJNI.b2Min(Vec2.getCPtr(a), a, Vec2.getCPtr(b), b), true);
  }

  public static Vec2 b2Max(Vec2 a, Vec2 b) {
    return new Vec2(liquidfunJNI.b2Max(Vec2.getCPtr(a), a, Vec2.getCPtr(b), b), true);
  }

  public static Vec2 b2Clamp(Vec2 a, Vec2 low, Vec2 high) {
    return new Vec2(liquidfunJNI.b2Clamp(Vec2.getCPtr(a), a, Vec2.getCPtr(low), low, Vec2.getCPtr(high), high), true);
  }

  public static long b2NextPowerOfTwo(long x) {
    return liquidfunJNI.b2NextPowerOfTwo(x);
  }

  public static boolean b2IsPowerOfTwo(long x) {
    return liquidfunJNI.b2IsPowerOfTwo(x);
  }

  public static void setB2ParticleColor_zero(ParticleColor value) {
    liquidfunJNI.b2ParticleColor_zero_set(ParticleColor.getCPtr(value), value);
  }

  public static ParticleColor getB2ParticleColor_zero() {
    return new ParticleColor(liquidfunJNI.b2ParticleColor_zero_get(), false);
  }

  public static int b2CalculateParticleIterations(float gravity, float radius, float timeStep) {
    return liquidfunJNI.b2CalculateParticleIterations(gravity, radius, timeStep);
  }

  public static boolean b2PairLessThan(Pair pair1, Pair pair2) {
    return liquidfunJNI.b2PairLessThan(Pair.getCPtr(pair1), pair1, Pair.getCPtr(pair2), pair2);
  }

  public static short getB2_nullFeature() {
    return liquidfunJNI.b2_nullFeature_get();
  }

  public static void b2GetPointStates(SWIGTYPE_p_b2PointState state1, SWIGTYPE_p_b2PointState state2, Manifold manifold1, Manifold manifold2) {
    liquidfunJNI.b2GetPointStates(SWIGTYPE_p_b2PointState.getCPtr(state1), SWIGTYPE_p_b2PointState.getCPtr(state2), Manifold.getCPtr(manifold1), manifold1, Manifold.getCPtr(manifold2), manifold2);
  }

  public static void b2CollideCircles(Manifold manifold, CircleShape circleA, Transform xfA, CircleShape circleB, Transform xfB) {
    liquidfunJNI.b2CollideCircles(Manifold.getCPtr(manifold), manifold, CircleShape.getCPtr(circleA), circleA, Transform.getCPtr(xfA), xfA, CircleShape.getCPtr(circleB), circleB, Transform.getCPtr(xfB), xfB);
  }

  public static void b2CollidePolygonAndCircle(Manifold manifold, PolygonShape polygonA, Transform xfA, CircleShape circleB, Transform xfB) {
    liquidfunJNI.b2CollidePolygonAndCircle(Manifold.getCPtr(manifold), manifold, PolygonShape.getCPtr(polygonA), polygonA, Transform.getCPtr(xfA), xfA, CircleShape.getCPtr(circleB), circleB, Transform.getCPtr(xfB), xfB);
  }

  public static void b2CollidePolygons(Manifold manifold, PolygonShape polygonA, Transform xfA, PolygonShape polygonB, Transform xfB) {
    liquidfunJNI.b2CollidePolygons(Manifold.getCPtr(manifold), manifold, PolygonShape.getCPtr(polygonA), polygonA, Transform.getCPtr(xfA), xfA, PolygonShape.getCPtr(polygonB), polygonB, Transform.getCPtr(xfB), xfB);
  }

  public static void b2CollideEdgeAndCircle(Manifold manifold, EdgeShape polygonA, Transform xfA, CircleShape circleB, Transform xfB) {
    liquidfunJNI.b2CollideEdgeAndCircle(Manifold.getCPtr(manifold), manifold, EdgeShape.getCPtr(polygonA), polygonA, Transform.getCPtr(xfA), xfA, CircleShape.getCPtr(circleB), circleB, Transform.getCPtr(xfB), xfB);
  }

  public static void b2CollideEdgeAndPolygon(Manifold manifold, EdgeShape edgeA, Transform xfA, PolygonShape circleB, Transform xfB) {
    liquidfunJNI.b2CollideEdgeAndPolygon(Manifold.getCPtr(manifold), manifold, EdgeShape.getCPtr(edgeA), edgeA, Transform.getCPtr(xfA), xfA, PolygonShape.getCPtr(circleB), circleB, Transform.getCPtr(xfB), xfB);
  }

  public static int b2ClipSegmentToLine(ClipVertex vOut, ClipVertex vIn, Vec2 normal, float offset, int vertexIndexA) {
    return liquidfunJNI.b2ClipSegmentToLine(ClipVertex.getCPtr(vOut), vOut, ClipVertex.getCPtr(vIn), vIn, Vec2.getCPtr(normal), normal, offset, vertexIndexA);
  }

  public static boolean b2TestOverlap(Shape shapeA, int indexA, Shape shapeB, int indexB, Transform xfA, Transform xfB) {
    return liquidfunJNI.b2TestOverlap__SWIG_0(Shape.getCPtr(shapeA), shapeA, indexA, Shape.getCPtr(shapeB), shapeB, indexB, Transform.getCPtr(xfA), xfA, Transform.getCPtr(xfB), xfB);
  }

  public static boolean b2TestOverlap(AABB a, AABB b) {
    return liquidfunJNI.b2TestOverlap__SWIG_1(AABB.getCPtr(a), a, AABB.getCPtr(b), b);
  }

  public static void b2Distance(DistanceOutput output, SimplexCache cache, DistanceInput input) {
    liquidfunJNI.b2Distance__SWIG_1(DistanceOutput.getCPtr(output), output, SimplexCache.getCPtr(cache), cache, DistanceInput.getCPtr(input), input);
  }

  public static void b2TimeOfImpact(TOIOutput output, TOIInput input) {
    liquidfunJNI.b2TimeOfImpact(TOIOutput.getCPtr(output), output, TOIInput.getCPtr(input), input);
  }

  public static int getB2_chunkSize() {
    return liquidfunJNI.b2_chunkSize_get();
  }

  public static int getB2_maxBlockSize() {
    return liquidfunJNI.b2_maxBlockSize_get();
  }

  public static int getB2_blockSizes() {
    return liquidfunJNI.b2_blockSizes_get();
  }

  public static int getB2_chunkArrayIncrement() {
    return liquidfunJNI.b2_chunkArrayIncrement_get();
  }

  public static int getB2_stackSize() {
    return liquidfunJNI.b2_stackSize_get();
  }

  public static int getB2_maxStackEntries() {
    return liquidfunJNI.b2_maxStackEntries_get();
  }

  public static int getB2_mallocAlignment() {
    return liquidfunJNI.b2_mallocAlignment_get();
  }

  public static float b2MixFriction(float friction1, float friction2) {
    return liquidfunJNI.b2MixFriction(friction1, friction2);
  }

  public static float b2MixRestitution(float restitution1, float restitution2) {
    return liquidfunJNI.b2MixRestitution(restitution1, restitution2);
  }

  public static float getB2_minPulleyLength() {
    return liquidfunJNI.b2_minPulleyLength_get();
  }

}
